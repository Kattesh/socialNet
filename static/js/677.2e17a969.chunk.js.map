{"version":3,"file":"static/js/677.2e17a969.chunk.js","mappings":"+JACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCgBhL,EAVmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAAA,OAAU,IAAKA,EAAAA,OAA/B,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCEtC,EANgB,SAACN,GACb,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMO,W,wCC6BpCC,EAAiB,SAACR,GAIpB,OACI,SAAC,KAAD,CAAMS,SAJU,SAACC,GACjBV,EAAMW,YAAYD,EAAOE,iBAGzB,SACK,gBAAEC,EAAF,EAAEA,aAAF,EAAgBC,SAAhB,EAA0BC,KAA1B,EAAgCC,WAAhC,OACG,kBAAMP,SAAUI,EAAhB,WACI,0BACI,SAAC,KAAD,CAAOP,KAAK,iBAAiBW,UAAUC,EAAAA,EAAAA,IAAkBC,EAAAA,IAAUC,EAAAA,EAAAA,IAAiB,KAC7EC,UAAWC,EAAAA,EAAUC,YAAY,0BAE5C,0BACI,8CAOxB,EAzCgB,SAACvB,GACb,IAAIwB,EAAQxB,EAAMyB,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACpC,SAAC,EAAD,CAAYvB,KAAMuB,EAAEvB,KAAiBJ,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAEjC4B,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OACtC,SAAC,EAAD,CAASzB,QAASyB,EAAEzB,QAAoBL,GAAI8B,EAAE9B,IAAZ8B,EAAE9B,OAElC+B,GAAWC,EAAAA,EAAAA,MAEjB,OADKlC,EAAMmC,QAAQF,EAAS,WAExB,iBAAK9B,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SAAiCsB,KACjC,iBAAKvB,UAAWC,EAAAA,SAAhB,WACI,+BAAO0B,MACP,SAACtB,EAAD,CAAgBG,YAAaX,EAAMW,qB,qDCxB7CyB,EAAkB,SAACZ,GACrB,MAAO,CACHW,OAAQX,EAAMa,KAAKF,SCO3B,IAaA,GAAeG,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACe,GACtB,MAAO,CACH7B,YAAa,SAACC,GACV4B,GAASC,EAAAA,EAAAA,GAAmB7B,UDXjC,SAA6B8B,GAShC,OADiCH,EAAAA,EAAAA,IAAQH,EAARG,EAPP,SAACvC,GACMA,EAAxBmC,OAAL,IAAgBQ,GAAhB,OAA6B3C,EAA7B,GAEMiC,GAAWC,EAAAA,EAAAA,MAEjB,OADKlC,EAAMmC,QAAQF,EAAS,WACrB,SAACS,GAAD,UAAeC,SCU9B,CAEsBC","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import s from \"./../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\nexport type DialogType = {\n    name: string\n    id: number\n}\nconst DialogItem = (props:DialogType) => {\n    let path = \"/dialogs/\" + props.id\n\n    return (\n        <div className={s.dialog +' '+ s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem","import s from \"./../Dialogs.module.css\";\nimport React from \"react\";\n\nexport type MessageType = {\n    id: number\n    message: string\n}\n\nconst Message = (props:MessageType) =>{\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Message","import React from 'react';\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPageInitialStateType} from \"../../redux/dialogs-reducer\";\nimport {useNavigate} from \"react-router-dom\";\nimport {Form, Field} from 'react-final-form'\nimport {Textarea} from \"../common/FormControls/FormsControl\";\nimport {composeValidators, maxLengthCreator, required} from \"../../utils/validators/validators\";\n\ntype DialogsPropsType = AddMessageType & {\n    dialogsPage: DialogsPageInitialStateType\n    isAuth: boolean\n}\ntype AddMessageType = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nconst Dialogs = (props: DialogsPropsType) => {\n    let state = props.dialogsPage\n    let dialogsElements = state.dialogs.map((d) => (\n        <DialogItem name={d.name} key={d.id} id={d.id}/>\n    ))\n    let messagesElements = state.messages.map((m) => (\n        <Message message={m.message} key={m.id} id={m.id}/>\n    ))\n    const navigate = useNavigate()\n    if (!props.isAuth) navigate(\"/login\")\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>{dialogsElements}</div>\n            <div className={s.messages}>\n                <div> {messagesElements}</div>\n                <AddMessageForm sendMessage={props.sendMessage}/>\n            </div>\n        </div>\n    )\n}\n\nconst AddMessageForm = (props: AddMessageType) => {\n    let addNewMessage = (values: { newMessageBody: string }) => {\n        props.sendMessage(values.newMessageBody)\n    }\n    return (\n        <Form onSubmit={addNewMessage}>\n            {({handleSubmit, pristine, form, submitting}) => (\n                <form onSubmit={handleSubmit}>\n                    <div>\n                        <Field name=\"newMessageBody\" validate={composeValidators(required, maxLengthCreator(30))}\n                               component={Textarea} placeholder=\"Enter your message\"/>\n                    </div>\n                    <div>\n                        <button>Send</button>\n                    </div>\n                </form>\n            )}\n        </Form>\n    )\n}\nexport default Dialogs;\n","import { useNavigate} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {StateType} from \"../redux/redux-store\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: React.FC<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        //если не залогинен, то на страницу логина перебрасывает\n        const navigate = useNavigate()\n        if (!props.isAuth) navigate(\"/login\")\n        return <Component {...restProps as T}/>\n    }\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","import React from 'react';\nimport {\n    DialogsPageInitialStateType,\n    sendMessageCreator,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {ActionsTypes, StateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype MapStatePropsType = {\n    dialogsPage: DialogsPageInitialStateType\n}\n\ntype MapDispatchPropsType = {\n    sendMessage: (newMessageBody:string) => void\n}\nlet mapStateToProps = (state: StateType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch<ActionsTypes>): MapDispatchPropsType => {\n    return {\n        sendMessage: (newMessageBody:string) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect)(Dialogs);\n"],"names":["props","path","id","className","s","to","name","message","AddMessageForm","onSubmit","values","sendMessage","newMessageBody","handleSubmit","pristine","form","submitting","validate","composeValidators","required","maxLengthCreator","component","Textarea","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","navigate","useNavigate","isAuth","mapStateToProps","auth","compose","connect","dispatch","sendMessageCreator","Component","restProps","Dialogs"],"sourceRoot":""}